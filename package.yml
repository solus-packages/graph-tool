name       : graph-tool
version    : 2.32
release    : 9
source     :
    - https://downloads.skewed.de/graph-tool/graph-tool-2.32.tar.xz : c675f43eac4b0f03d094d4d624b53dc07e3d2f3e42454b7695c45802a88c0f97
license    : GPL-3.0-or-later
component  : programming.python
summary    : Efficient python module for analysis of graphs
description: |
    Graph-tool is an efficient python module for manipulation and statistical analysis of graphs
builddeps  :
    - pkgconfig(cairomm-1.0)
    - pkgconfig(expat)
    - pkgconfig(libsparsehash)
    - pkgconfig(py3cairo)
    - pkgconfig(python3)
    - CGAL-devel
    - libboost-devel
    - matplotlib
    - scipy
rundeps    :
    - matplotlib
    - python3-cairo
    - scipy
clang      : yes
environment: |
    # workaround for bug in boost 1.72
    export CPPFLAGS="$CPPFLAGS -DHAVE_BOOST_COROUTINE"
    # Linking jobs routinely use 10+ GiB of RAM, so limit them to 1 at a time
    export LLVM_PARALLEL_LINK_JOBS=1
setup      : |
    %configure PREFIX=/usr PYTHON=python3
build      : |
    # Maximum observed single compile job size is around 8 GiB Resident with sizes in the range 1.5-5 GiB the most common.
    # Likely due to poor job parallelism in make, the build will fan out to $CPUs -> 4-6 CPUs -> 1-2 CPUs.
    # For systems with 16 GiB RAM, make -j3 is barely suitable and make -j2 is recommended if the system will be in use during the build.
    # For systems with 32 GiB RAM, make -j12 is probably the maximum.
    # For systems with 64 GiB RAM, make -j24 is probably the maximum. (Should be used for the Buildserver)
    %make
install    : |
    %make_install
